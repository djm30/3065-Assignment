@page "/metrics"

<PageTitle>Weather forecast</PageTitle>

@using src.Data
@inject MonitoringService MonitoringService
@inject NavigationManager NavManager

<h1>Metrics</h1>

@if (metrics == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="flex-row justify-content-between">
        <p>Last Checked: @MonitoringService.LastChecked</p>
        <button class="btn btn-info" @onclick="RefreshResults">Check Now</button>
    </div>

    <table class="table">
        <thead>
        <tr>
            <th>Service Name</th>
            <th>Response Time</th>
            <th>Services Up</th>
            <th>Services Correct</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var metric in metrics)
        {
            <tr role="button" @onclick="() => {RedirectToSingle(metric.name);}" title="Click for full results">
                <td>@metric.name</td>
                <td>@metric.AggregateData().averageResponseTime ms</td>
                <td>@metric.AggregateData().servicesUp</td>
                <td>@metric.AggregateData().servicesCorrect</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<ServiceMonitorSchema> metrics;

    protected override async Task OnInitializedAsync()
    {
        metrics = await MonitoringService.GetMonitorData();
    }

    private async void RefreshResults()
    {
        metrics = await MonitoringService.RunChecksAsync();
        StateHasChanged();
    }

    private void RedirectToSingle(string serviceName)
    {
        NavManager.NavigateTo("/service/" + serviceName);
    }

}