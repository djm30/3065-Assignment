@page "/service/{name}"

<PageTitle>@name</PageTitle>

@using System.Net
@using src.Data
@using src.Services
@inject MonitoringService MonitoringService




@if (service == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h1>Metrics for @service.name Service</h1>
    <div class="flex-row justify-content-between">
        <p>Last Checked: @MonitoringService.LastChecked</p>
    </div>
    <table class="table mt-5 pt-2">
        <thead>
        <tr>
            <th>Service URL</th>
            <th>Response Time</th>
            <th>Status Code</th>
            <th>Correct Result</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var result in service.services)
        {
            <tr>
                <td>@result.url</td>
                <td>@result.responseTime ms</td>
                <td>@(result.statusCode != HttpStatusCode.UnavailableForLegalReasons ? $"{(int)result.statusCode,-3}, {result.statusCode}" : "Service Not Found")</td>
                <td  role="button" title="Expected: @service.expected_value Actual: @result.actual_result">@result.isExpected</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Parameter] public string name { get; set; }

    private ServiceMonitorSchema? service;

    protected override async Task OnInitializedAsync()
    {
        var services = await MonitoringService.GetMonitorData();
        service = services.Find(x => x.name == name);
    }

}